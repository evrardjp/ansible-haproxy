---
# Copyright 2015, Jean-Philippe Evrard <jean-philippe@evrard.me>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Ensuring fragments folder exists
  ansible.builtin.file:
    path: "{{ haproxy_fragments_folder }}"
    state: directory
    recurse: yes
  delegate_to: localhost
  run_once: true

- name: Copying the user fragments
  ansible.builtin.copy:
    remote_src: no
    src: "{{ item.src | default(omit) }}"
    content: "{{ item.content | default(omit) }}"
    dest: "{{ haproxy_fragments_folder | dirname }}/000_user_{{ index }}.cfg"
  loop: "{{ haproxy_user_fragments }}"
  loop_control:
    index_var: index
  register: _copied_user_fragments
  delegate_to: localhost
  run_once: true

- name: Record all fragments files
  ansible.builtin.set_fact:
    haproxy_fragments: "{{ _copied_user_fragments.results | map(attribute='path') | list }}"
  delegate_to: localhost
  run_once: true

- name: Find all fragment files
  ansible.builtin.find:
    path: "{{ haproxy_fragments_folder }}"
  register: _files_in_fragments_folder

- name: Cleanup cache
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop: "{{ _files_in_fragments_folder.files | map(attribute='path') | list | sort | difference(haproxy_fragments) }}"

## TODO: Refactor
#- name: Cleaning up the fragments folder
#  file:
#    path: "{{ haproxy_config_fragments_folder }}"
#    state: absent
#  when: haproxy_cleanup_fragments | bool
#  tags:
#    - haproxy-cleanup
#    - haproxy-fragments
#
##- name: Making sure the fragment folder exists
##  file:
##    path: "{{ haproxy_config_fragments_folder}}"
##    state: directory
#
#- name: Drop base haproxy config
#  template:
#    src: haproxy.cfg.j2
#    dest: "{{ haproxy_config_fragments_folder }}/00-haproxy.cfg"
#  notify: Regenerate haproxy configuration
#  tags:
#    - haproxy-base-config
#
#- name: Generate files for the frontends and backends
#  template:
#    src: service.j2
#    dest: "{{ haproxy_config_fragments_folder }}/{{ item.key }}"
#  with_dict: "{{ haproxy_services }}"
#  notify: Regenerate haproxy configuration
#  tags:
#    - haproxy-service-config
