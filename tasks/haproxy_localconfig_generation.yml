---
# Copyright 2022, Jean-Philippe Evrard <open-source@a.spamming.party>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Ensuring fragments folder exists
  ansible.builtin.file:
    path: "{{ haproxy_fragments_folder }}"
    state: directory
    recurse: true

########
# User #
########

- name: Copying the user fragments
  ansible.builtin.copy:
    remote_src: false
    src: "{{ item.src | default(omit) }}"
    content: "{{ item.content | default(omit) }}"
    dest: "{{ haproxy_fragments_folder | dirname }}/000_user_{{ index }}.cfg"
    mode: "0640"
  loop: "{{ haproxy_user_fragments }}"
  loop_control:
    index_var: index
  register: _copied_user_fragments

##########
# Global #
##########

- name: Sanity check on user input before generating the global fragment
  ansible.builtin.fail:
    msg: "Fragment for global cannot be generated, incorrect keyword requested"
  when:
    - haproxy_globals_merged.keys() | list | difference(haproxy_supported_keywords['global'])
    - haproxy_check_config_with_role_recommendations | bool

- name: Generate the global file
  ansible.builtin.template:
    mode: "0640"
    src: global.cfg.j2
    dest: "{{ haproxy_fragments_folder | dirname }}/001_global.cfg"
  when:
    - haproxy_globals_merged.keys() | length > 0
  notify:
    - restart haproxy

############
# Defaults #
############

- name: Sanity check on user input before generating the anonymous defaults
  ansible.builtin.fail:
    msg: "Anonymous defaults cannot be generated, incorrect keyword requested"
  when:
    - haproxy_defaults_merged.keys() | list | difference(haproxy_supported_keywords['defaults'])
    - haproxy_check_config_with_role_recommendations | bool

- name: Sanity check on user input before generating the named defaults
  ansible.builtin.fail:
    msg: "Named defaults cannot be generated, incorrect keyword requested"
  when:
    - haproxy_named_defaults.values() | list | combine | list | difference(haproxy_supported_keywords['defaults'])
    - haproxy_check_config_with_role_recommendations | bool

- name: Generate the anonymous defaults fragment file
  ansible.builtin.template:
    src: defaults.cfg.j2
    dest: "{{ haproxy_fragments_folder | dirname }}/002_defaults.cfg"
    mode: "0640"
  vars:
    default_name:
    defaults: "{{ haproxy_defaults_merged }}"
  when:
    - haproxy_defaults_merged.keys() | length > 0
  notify:
    - restart haproxy

- name: Generate the named defaults fragment files
  ansible.builtin.template:
    src: defaults.cfg.j2
    dest: "{{ haproxy_fragments_folder | dirname }}/002_defaults_{{ default_name }}.cfg"
    mode: "0640"
  vars:
    default_name: "{{ item.key }}"
    defaults: "{{ item.value }}"
  loop: "{{ haproxy_named_defaults | dict2items() }}"
  when:
    - haproxy_named_defaults.keys() | length > 0
  notify:
    - restart haproxy

##########
# Listen #
##########

- name: Sanity check on user input before generating the listens
  ansible.builtin.fail:
    msg: "Listen cannot be generated, incorrect keyword requested"
  when:
    - haproxy_listens.values() | list | combine | list | difference(haproxy_supported_keywords['listen'])
    - haproxy_check_config_with_role_recommendations | bool

- name: Check that listens contain the recommended data
  ansible.builtin.fail:
    msg: "Listen will be incomplete, please make sure to fill the following keyword(s): {{ haproxy_recommended_keywords['listen'] | join(', ') }}"
  register: listen_recommendation_state
  # This will allow to show as an error but continue.
  ignore_errors: true
  when:
    - haproxy_listens.keys() | length > 0
    - haproxy_recommended_keywords['listen'] | difference(haproxy_listens.values() | list | combine | list) | length != 0
    - haproxy_check_config_with_role_recommendations | bool

- name: Generate the listen fragment files
  ansible.builtin.template:
    src: generic.cfg.j2
    dest: "{{ haproxy_fragments_folder | dirname }}/003_listen_{{ name }}.cfg"
    mode: "0640"
  vars:
    top_level_type: "listen"
    name: "{{ item.key }}"
    content: "{{ item.value }}"
  loop: "{{ haproxy_listens | dict2items() }}"
  when:
    - haproxy_listens.keys() | length > 0
  notify:
    - restart haproxy

##############################
# Cleanup cache of fragments #
##############################

- name: Record the expected files
  ansible.builtin.set_fact:
    haproxy_fragments: |-
      {% set fragments = [] %}
      {% set _ = fragments.extend(_copied_user_fragments.results | map(attribute='dest') | list) %}
      {% if haproxy_globals_merged.keys() | length > 0 %}
        {% set _ = fragments.append(haproxy_fragments_folder | dirname ~ '/001_global.cfg') %}
      {% endif %}
      {% if haproxy_defaults_merged.keys() | length > 0 %}
        {% set _ = fragments.append(haproxy_fragments_folder | dirname ~ '/002_defaults.cfg') %}
      {% endif %}
      {% for filename in haproxy_named_defaults.keys()  %}
        {% set _ = fragments.append(haproxy_fragments_folder | dirname ~ '/002_defaults_' ~ filename ~ '.cfg') %}
      {% endfor %}
      {% for filename in haproxy_listens.keys()  %}
        {% set _ = fragments.append(haproxy_fragments_folder | dirname ~ '/003_listen_' ~ filename ~ '.cfg') %}
      {% endfor %}
      {{ fragments }}

- name: Show the expected fragment files
  ansible.builtin.debug:
    verbosity: 1
    var: haproxy_fragments

- name: Find fragment files present in cache
  ansible.builtin.find:
    path: "{{ haproxy_fragments_folder }}"
  register: _files_in_fragments_folder

- name: Cleanup cache
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop: "{{ _files_in_fragments_folder.files | map(attribute='path') | list | sort | difference(haproxy_fragments) }}"
