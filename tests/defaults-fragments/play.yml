---
- name: Test fail safe from incorrect user input on anonymous defaults
  hosts: localhost,
  connection: local
  vars:
    haproxy_fragments_folder: "{{ playbook_dir }}/fragments/"
    haproxy_defaults:
      invalidkey: "invalid"
  tasks:
    - name: Deploy and fail due to incorrect global
      block:
        - name: Deploy HAProxy
          ansible.builtin.import_role:
            name: "{{ playbook_dir }}/../../../ansible-haproxy"
      rescue:
        - name: Debug the failure
          ansible.builtin.fail:
            msg: The role should have failed on generation due to invalidkey in global
          when:
            - ansible_failed_task.name != "Sanity check on user input before generating the anonymous defaults"

- name: Test with good anonymous defaults
  hosts: localhost
  connection: local
  vars:
    haproxy_fragments_folder: "{{ playbook_dir }}/fragments/"
    haproxy_defaults:
      timeout connect: 10s
      timeout client: 1m
      timeout server: 1m
    # Making sure the final configuration passes haproxy validation
    haproxy_user_fragments:
      - content: |
          listen awesome
            bind :4444
  tasks:
    - name: Deploy HAProxy
      ansible.builtin.import_role:
        name: "{{ playbook_dir }}/../../../ansible-haproxy"

    - name: Find created files
      ansible.builtin.find:
        path: "{{ haproxy_fragments_folder }}"
      register: _files_in_fragments_folder

    - name: Set fragments folder content
      ansible.builtin.set_fact:
        _haproxy_fragments_folder_content: "{{ _files_in_fragments_folder.files | map(attribute='path') | list | sort }}"

    - name: Show fragments folder content
      ansible.builtin.debug:
        var: _haproxy_fragments_folder_content
        verbosity: 1

    - name: Check that the default fragments are present
      ansible.builtin.assert:
        that:
          - "haproxy_fragments_folder ~ '002_defaults.cfg' in _haproxy_fragments_folder_content"

    - name: Check that fragments' content matches expectations
      ansible.builtin.assert:
        that:
          - "lookup('file', haproxy_fragments_folder ~ '002_defaults.cfg') | regex_search('timeout connect.*10s') is not none"

- name: Test with both anonymous and named defaults
  hosts: localhost
  connection: local
  vars:
    haproxy_fragments_folder: "{{ playbook_dir }}/fragments/"
    haproxy_defaults:
      timeout connect: 10s
      timeout client: 1m
      timeout server: 1m
    haproxy_named_defaults:
      profile1:
        timeout connect: 60s
      profile2:
        timeout connect: 1s
    haproxy_user_fragments:
      - content: |
          listen awesome
            bind :4444
  tasks:
    - name: Deploy HAProxy
      ansible.builtin.import_role:
        name: "{{ playbook_dir }}/../../../ansible-haproxy"

    - name: Find created files
      ansible.builtin.find:
        path: "{{ haproxy_fragments_folder }}"
      register: _files_in_fragments_folder

    - name: Set fragments folder content
      ansible.builtin.set_fact:
        _haproxy_fragments_folder_content: "{{ _files_in_fragments_folder.files | map(attribute='path') | list | sort }}"

    - name: Show fragments folder content
      ansible.builtin.debug:
        var: _haproxy_fragments_folder_content
        verbosity: 1

    - name: Check that we have the anonymous and named defaults
      ansible.builtin.assert:
        that:
          - "haproxy_fragments_folder ~ '002_defaults.cfg' in _haproxy_fragments_folder_content"
          - "haproxy_fragments_folder ~ '002_defaults_profile1.cfg' in _haproxy_fragments_folder_content"
          - "haproxy_fragments_folder ~ '002_defaults_profile2.cfg' in _haproxy_fragments_folder_content"

    - name: Check that fragments' content matches expectations
      ansible.builtin.assert:
        that:
          - "lookup('file', haproxy_fragments_folder ~ '002_defaults.cfg') | regex_search('timeout connect.*10s') is not none"
          - "lookup('file', haproxy_fragments_folder ~ '002_defaults_profile1.cfg') | regex_search('timeout connect.*60s') is not none"
          - "lookup('file', haproxy_fragments_folder ~ '002_defaults_profile1.cfg') | regex_search('defaults profile1') is not none"
          - "lookup('file', haproxy_fragments_folder ~ '002_defaults_profile2.cfg') | regex_search('defaults profile2') is not none"
